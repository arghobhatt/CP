#include <bits/stdc++.h>
using namespace std;

bool isSafe(vector<string> &board, int row, int col, int n) {
    // Check horizontally (not needed since only one queen is placed per row)
    for (int j = 0; j < n; j++) {
        if (board[row][j] == 'Q') return false;
    }

    // Check vertically
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 'Q') return false;
    }

    // Check left diagonal (\ direction)
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 'Q') return false;
    }

    // Check right diagonal (/ direction)
    for (int i = row, j = col; i >= 0 && j < n; i--, j++) {
        if (board[i][j] == 'Q') return false;
    }

    return true;
}

void nQueens(vector<string> &board, int row, int n, vector<vector<string>> &ans) {
    if (row == n) {
        ans.push_back(board);
        return;
    }
    for (int j = 0; j < n; j++) {
        if (isSafe(board, row, j, n)) {
            board[row][j] = 'Q';
            nQueens(board, row + 1, n, ans);
            board[row][j] = '.';
        }
    }
}

vector<vector<string>> solveNQueens(int n) {
    vector<string> board(n, string(n, '.'));
    vector<vector<string>> ans;
    nQueens(board, 0, n, ans);
    return ans;
}

int main() {
    int n;
    cin >> n;
    vector<vector<string>> ans = solveNQueens(n);

    for (int i = 0; i < ans.size(); i++) {
        for (int j = 0; j < n; j++) {
            cout << ans[i][j] << endl;  // Print each row of the board
        }
        cout << endl; // Separate different board solutions with a blank line
    }

    return 0;
}
